import os
import db
import toml
import asyncio
import logging
import pyrogram
import globals as g

from typing import Dict

from pyrogram import Client, filters, compose
from pyrogram.types import Message, BotCommand
from pyrogram.raw.types.wall_paper_settings import WallPaperSettings
from pyrogram.raw.functions.account.upload_wall_paper import UploadWallPaper
from pyrogram.errors import (
    ApiIdInvalid, AuthKeyUnregistered, FloodWait, PhoneCodeExpired,
    PhoneCodeInvalid, PhoneNumberInvalid, SessionPasswordNeeded, UserDeactivatedBan
)
from pyrogram.enums import ParseMode
from pyrogram.handlers import MessageHandler

# ROUTES
from info_handlers import start_command, help_command
from ai_handlers import set_gemini_token_command, gemini_ask

USER_SESSION_NAME_TEMPLATE = "user_{}"

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("rhgTelegramGroup")

main_states: Dict[int, int] = {}
auth_states: Dict[int, Dict] = {}
wallpaper_states: Dict[int, Dict] = {}

cached_gemini_tokens = {}


class MainState:
    IDLE = 0
    AUTH = 1
    WALLPAPER = 2
    AI = 3


class AuthState:
    IDLE = 0
    WAITING_PHONE = 1
    WAITING_CODE = 2
    WAITING_PASSWORD = 3
    LOGGED_IN = 4
    ERROR = 5


if __name__ == "__main__":

    
    bot_token = g.cfg.get("MAIN", {}).get("bot_token")
    app_id = g.cfg.get("MAIN", {}).get("app_id")
    app_hash = g.cfg.get("MAIN", {}).get("app_hash")
    
    if not bot_token or not app_id or not app_hash:
        raise ValueError("Expected bot_token, app_id, and app_hash in config.toml")
    
    adb = db.DB()
    
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    bot = Client("rhgTelegramGroupBot", bot_token=bot_token, api_id=app_id, api_hash=app_hash)



# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ ---

async def start_user_auth(user_id: int, phone_number: str):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
    state = auth_states.get(user_id)
    if not state:
        logger.error(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è user_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    session_name = USER_SESSION_NAME_TEMPLATE.format(user_id)
    user_client = Client(session_name, app_id, app_hash, in_memory=False, workdir=os.path.join(".", "sessions"))

    try:
        logger.info(f"[{user_id}] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {session_name}...")
        await user_client.connect()
        logger.info(f"[{user_id}] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ –Ω–æ–º–µ—Ä {phone_number}...")
        sent_code_info = await user_client.send_code(phone_number)

        state['phone_code_hash'] = sent_code_info.phone_code_hash
        state['state'] = AuthState.WAITING_CODE
        state['user_client'] = user_client # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        state['phone_number'] = phone_number # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä

        logger.info(f"[{user_id}] –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await bot.send_message(
            user_id,
            f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä `{phone_number}` —á–µ—Ä–µ–∑ Telegram (–∏–ª–∏ SMS/–∑–≤–æ–Ω–æ–∫).\n"
            f"–¢–∏–ø: `{sent_code_info.type.name}`\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥.",
            parse_mode=ParseMode.MARKDOWN
        )

    except FloodWait as e:
        logger.warning(f"[{user_id}] FloodWait: {e.value} —Å–µ–∫—É–Ω–¥.")
        state['state'] = AuthState.ERROR
        state['last_error'] = f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.value} —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /login."
        await bot.send_message(user_id, state['last_error'])
        if 'user_client' in state and state['user_client'].is_connected:
            await state['user_client'].disconnect()
        del state['user_client'] # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    except PhoneNumberInvalid:
        logger.warning(f"[{user_id}] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        state['state'] = AuthState.ERROR
        state['last_error'] = "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /login —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, +1234567890)."
        await bot.send_message(user_id, state['last_error'])
        if 'user_client' in state and state['user_client'].is_connected:
            await state['user_client'].disconnect()
        del state['user_client']
    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")
        state['state'] = AuthState.ERROR
        state['last_error'] = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /login —Å–Ω–æ–≤–∞."
        await bot.send_message(user_id, state['last_error'])
        if 'user_client' in state and state['user_client'].is_connected:
            await state['user_client'].disconnect()
        del state['user_client']


async def process_user_code(user_id: int, code: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–¥."""
    state = auth_states.get(user_id)
    if not state or 'user_client' not in state or 'phone_number' not in state or 'phone_code_hash' not in state:
        logger.error(f"[{user_id}] –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞.")
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: /login")
        return

    user_client: Client = state['user_client']
    phone_number = state['phone_number']
    phone_code_hash = state['phone_code_hash']

    try:
        logger.info(f"[{user_id}] –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –∫–æ–¥–æ–º...")
        await user_client.sign_in(phone_number, phone_code_hash, code)
        # –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –±–µ–∑ 2FA
        logger.info(f"[{user_id}] –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
        state['state'] = AuthState.LOGGED_IN
        await bot.send_message(user_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏! –í–∞—à–∞ —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        await user_client.disconnect() # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
        del state['user_client'] # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    except PhoneCodeInvalid:
        logger.warning(f"[{user_id}] –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.")
        state['state'] = AuthState.WAITING_CODE # –û—Å—Ç–∞–µ–º—Å—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∫–æ–¥–∞
        await bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    except PhoneCodeExpired:
        logger.warning(f"[{user_id}] –ö–æ–¥ –∏—Å—Ç–µ–∫.")
        state['state'] = AuthState.ERROR
        state['last_error'] = "‚ùå –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: /login"
        await bot.send_message(user_id, state['last_error'])
        await user_client.disconnect()
        del state['user_client']
    except SessionPasswordNeeded:
        logger.info(f"[{user_id}] –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA.")
        state['state'] = AuthState.WAITING_PASSWORD
        await bot.send_message(user_id, "üîë –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â–µ–Ω –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π (2FA). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å.")
    except FloodWait as e:
        logger.warning(f"[{user_id}] FloodWait –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e.value} —Å–µ–∫—É–Ω–¥.")
        state['state'] = AuthState.ERROR
        state['last_error'] = f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.value} —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /login."
        await bot.send_message(user_id, state['last_error'])
        await user_client.disconnect()
        del state['user_client']
    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
        state['state'] = AuthState.ERROR
        state['last_error'] = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /login —Å–Ω–æ–≤–∞."
        await bot.send_message(user_id, state['last_error'])
        if user_client.is_connected:
            await user_client.disconnect()
        del state['user_client']
    main_states[user_id] = MainState.IDLE


async def process_user_password(user_id: int, password: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–∞—Ä–æ–ª—å 2FA."""
    state = auth_states.get(user_id)
    if not state or 'user_client' not in state:
        logger.error(f"[{user_id}] –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª—è.")
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: /login")
        return

    user_client: Client = state['user_client']

    try:
        logger.info(f"[{user_id}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è 2FA...")
        await user_client.check_password(password)
        logger.info(f"[{user_id}] –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ (—Å 2FA)!")
        state['state'] = AuthState.LOGGED_IN
        await bot.send_message(user_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏! –í–∞—à–∞ —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        # –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
        await user_client.disconnect()
        del state['user_client']
        main_states[user_id] = MainState.IDLE

    except FloodWait as e:
        logger.warning(f"[{user_id}] FloodWait –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è: {e.value} —Å–µ–∫—É–Ω–¥.")
        state['state'] = AuthState.ERROR
        state['last_error'] = f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.value} —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /login."
        await bot.send_message(user_id, state['last_error'])
        await user_client.disconnect()
        del state['user_client']
    except Exception as e: # –í–∫–ª—é—á–∞—è –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å (PasswordHashInvalid)
        logger.warning(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è: {e}")
        # –ù–µ –≥–æ–≤–æ—Ä–∏–º –ø—Ä—è–º–æ "–Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        state['state'] = AuthState.WAITING_PASSWORD # –î–∞–µ–º –µ—â–µ –ø–æ–ø—ã—Ç–∫—É? –ò–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å? –õ—É—á—à–µ —Å–±—Ä–æ—Å–∏—Ç—å.
        state['state'] = AuthState.ERROR
        state['last_error'] = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /login —Å–Ω–æ–≤–∞."
        # state['state'] = STATE_WAITING_PASSWORD # –î–∞–µ–º –µ—â–µ –ø–æ–ø—ã—Ç–∫—É
        # await bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        await bot.send_message(user_id, state['last_error'])
        await user_client.disconnect()
        del state['user_client']




@bot.on_message(filters.command("set_wallpaper") & filters.private)
async def set_wallpaper_command(client: Client, message: Message):
    if main_states.get(message.from_user.id, MainState.IDLE) != MainState.IDLE:
        await message.reply_text("–≠–π, —Ç—ã —É–∂–µ —á—Ç–æ-—Ç–æ –¥–µ–ª–∞–µ—à—å. –ü–æ–∫–æ–Ω—á–∏ —Å–Ω–∞—á–∞–ª–∞ —Å —ç—Ç–∏–º!")
        return
    
    main_states[message.from_user.id] = MainState.WALLPAPER
    
    args = message.command[1:]
    if int(args[0]) % 30 != 0:
        await message.reply_text(f"–í—ã —É–∫–∞–∑–∞–ª–∏ –≥—Ä–∞–¥—É—Å —Ä–∞–≤–Ω—ã–π {args[0]}, –Ω–æ –≥—Ä–∞–¥—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–µ–Ω 30.\n–ù–∞–ø—Ä–∏–º–µ—Ä 0, 30, 60, 90, 120, 150, 180")
        main_states[message.from_user.id] = MainState.IDLE
        return

    available_weather_types = ["clear", "drizzle", "rain", "shower", "mist", "broken_clouds", "over_clouds"]
    if args[1] not in available_weather_types:
        await message.reply_text(f"–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –ø–æ–≥–æ–¥—ã –æ–∂–∏–¥–∞–µ–º–æ–π –ø–æ–≥–æ–¥—ã.\n–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {', '.join(available_weather_types)}")
        main_states[message.from_user.id] = MainState.IDLE
        return
    
    if int(args[2]) not in [-1, 0, 1]:
        await message.reply_text(f"–í—ã —É–∫–∞–∑–∞–ª–∏ —Ç–µ–º–µ–ø—É—Ä–∞—Ç—É—Ä—É —Ä–∞–≤–Ω—É—é {args[2]}, –Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ -1, 0 –∏ 1")
        main_states[message.from_user.id] = MainState.IDLE
        return
    
    try:
        args[3]
    except:
        await message.reply_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω group_id. –ü–æ–∂–∞–π–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –¥–ª—è –∫–∞–∫–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ!")
        main_states[message.from_user.id] = MainState.IDLE
        return
    
    wallpaper_states[message.from_user.id] = {"groupid": args[3], "weather": args[1], "temp": args[2], "degree": args[0]}
    await message.reply_text("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É.")
    

@bot.on_message(filters.command("cancel_all") & filters.private)
async def cancel_all_command(client: Client, message: Message):
    main_states[message.from_user.id] = MainState.IDLE
    await message.reply_text("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.")



@bot.on_message(filters.command("login") & filters.private)
async def login_command(client: Client, message: Message):
    if main_states.get(message.from_user.id, MainState.IDLE) != MainState.IDLE:
        await message.reply_text("–≠–π, —Ç—ã —É–∂–µ —á—Ç–æ-—Ç–æ –¥–µ–ª–∞–µ—à—å. –ü–æ–∫–æ–Ω—á–∏ —Å–Ω–∞—á–∞–ª–∞ —Å —ç—Ç–∏–º!")
        return
    
    main_states[message.from_user.id] = MainState.AUTH
    user_id = message.from_user.id
    if user_id in auth_states and auth_states[user_id]['state'] not in [AuthState.IDLE, AuthState.ERROR, AuthState.LOGGED_IN]:
        await message.reply_text("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—Ö–æ–¥–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏.")
        return

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ (–æ—à–∏–±–∫–∞ –∏–ª–∏ —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥)
    if user_id in auth_states and 'user_client' in auth_states[user_id]:
         if auth_states[user_id]['user_client'].is_connected:
             await auth_states[user_id]['user_client'].disconnect()

    auth_states[user_id] = {
        'state': AuthState.WAITING_PHONE,
        'user_client': None,
        'phone_number': None,
        'phone_code_hash': None,
        'last_error': None,
    }
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞.")
    await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +1234567890).")


@bot.on_message(filters.photo & filters.private)
async def photo_upload(client: Client, message: Message):
    if main_states.get(message.from_user.id, MainState.IDLE) == MainState.WALLPAPER:
        app = Client(USER_SESSION_NAME_TEMPLATE.format(message.from_user.id), api_id=app_id, api_hash=app_hash, workdir=os.path.join(".", "sessions"))
        await app.start()
        try:
            print("login")
            await app.get_me()
        except Exception as e:
            print(e)
            await message.reply_text("–í—ã –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /login")
        print("login")
        
        with app:
            wallpaper_settings = WallPaperSettings()
            
            try:
                file_path = os.path.join(".", "temp", f"image_{message.photo.file_id}.jpeg")
                
                await client.download_media(message, file_name=file_path)
                os.remove(file_path)
                uploaded_file = await app.save_file(file_path)
                uploaded_wallpaper = await app.invoke(UploadWallPaper(file=uploaded_file, mime_type="image/jpeg", settings=wallpaper_settings, for_chat=True))
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            
            try:
                groupid = wallpaper_states.get(message.from_user.id, {}).get("groupid", None)
                temp = wallpaper_states.get(message.from_user.id, {}).get("temp", None)
                weather = wallpaper_states.get(message.from_user.id, {}).get("weather", None)
                degree = wallpaper_states.get(message.from_user.id, {}).get("degree", None)

                if not groupid or not temp or not weather or not degree:
                    await message.reply_text("–ö–∞–∂–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                    await cancel_all_command(client, message)
                    return

                await adb.execute(f"INSERT INTO weather_wallpaper (groupid, temp, weather, degree, wpid, wpah) VALUES ('{groupid}', {temp}, '{weather}', {degree}, {uploaded_wallpaper.id}, {uploaded_wallpaper.access_hash})")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

            await message.reply_text("–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")


@bot.on_message(filters.text & filters.private)
async def handle_private_text(client: Client, message: Message):
    user_id = message.from_user.id
    text = message.text.strip()

    match main_states.get(message.from_user.id, MainState.IDLE):
        case MainState.IDLE:
            pass
        case MainState.AUTH:
            ast =  auth_states.get(message.from_user.id, {}).get("state", AuthState.IDLE)
            if ast == AuthState.WAITING_PHONE:
                logger.info(f"[{user_id}] –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {text}")
                phone_number = text
                asyncio.create_task(start_user_auth(user_id, phone_number))
                await message.reply_text("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
            elif ast == AuthState.WAITING_CODE:
                logger.info(f"[{user_id}] –ü–æ–ª—É—á–µ–Ω –∫–æ–¥: {'*' * len(text)}")
                code = text
                asyncio.create_task(process_user_code(user_id, code))
                await message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–¥...")
            elif ast == AuthState.WAITING_PASSWORD:
                logger.info(f"[{user_id}] –ü–æ–ª—É—á–µ–Ω –ø–∞—Ä–æ–ª—å: {'*' * len(text)}")
                password = text
                asyncio.create_task(process_user_password(user_id, password))
                await message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –ø–∞—Ä–æ–ª—å...")
            elif ast == AuthState.LOGGED_IN:
                await message.reply_text("–í—ã —É–∂–µ –≤–æ—à–ª–∏. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ —Å –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.")
            elif ast == AuthState.ERROR:
                last_error = auth_states.get(user_id, {}).get('last_error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.')
                await message.reply_text(last_error)
            else:
                await message.reply_text("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        case MainState.WALLPAPER:
            pass
        case MainState.AI: # AI
            pass


async def pre_message(client: Client, message: Message):
    if message.from_user.id not in g.cache:
        data = await g.adb.fetchone(f"SELECT userid, gemini_token FROM users WHERE userid == '{message.from_user.id}'")
        if not data:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –Ω–æ –æ–Ω –Ω–µ")
            message.stop_propagation()
            return
        else:
            g.cache[data[0]] = {"gemini_token": data[1], "context": []}



async def main():
    await bot.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    
    await bot.set_bot_commands([
        BotCommand("start", "–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        BotCommand("set_token", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π gemini —Ç–æ–∫–µ–Ω"),
    ])
    logger.info("–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    
    bot.add_handler(MessageHandler(pre_message), -100)
    bot.add_handler(MessageHandler(start_command, filters.command("start") & filters.private), 1)
    bot.add_handler(MessageHandler(help_command, filters.command("help") & filters.private), 1)
    
    bot.add_handler(MessageHandler(set_gemini_token_command, filters.command("set_token") & filters.private), 1)
    bot.add_handler(MessageHandler(gemini_ask, filters.mentioned), 2)
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã.")
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª.")
        await pyrogram.idle()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª KeyboardInterrupt. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        await bot.stop()
        quit()


    
if __name__ == "__main__":
    os.system("cls")
    if not bot:
        quit()
    bot.run(main())
    #asyncio.run(main())